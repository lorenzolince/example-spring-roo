// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.llh.web;

import com.llh.domain.Cliente;
import com.llh.domain.Pais;
import com.llh.domain.Visitas;
import com.llh.web.ClienteBean;
import com.llh.web.converter.PaisConverter;
import com.llh.web.converter.VisitasConverter;
import com.llh.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect ClienteBean_Roo_ManagedBean {
    
    declare @type: ClienteBean: @ManagedBean(name = "clienteBean");
    
    declare @type: ClienteBean: @SessionScoped;
    
    private String ClienteBean.name = "Clientes";
    
    private Cliente ClienteBean.cliente;
    
    private List<Cliente> ClienteBean.allClientes;
    
    private boolean ClienteBean.dataVisible = false;
    
    private List<String> ClienteBean.columns;
    
    private HtmlPanelGrid ClienteBean.createPanelGrid;
    
    private HtmlPanelGrid ClienteBean.editPanelGrid;
    
    private HtmlPanelGrid ClienteBean.viewPanelGrid;
    
    private boolean ClienteBean.createDialogVisible = false;
    
    @PostConstruct
    public void ClienteBean.init() {
        columns = new ArrayList<String>();
        columns.add("nombre");
        columns.add("apellido");
        columns.add("segundoNombre");
        columns.add("segundoApellido");
        columns.add("identificacion");
    }
    
    public String ClienteBean.getName() {
        return name;
    }
    
    public List<String> ClienteBean.getColumns() {
        return columns;
    }
    
    public List<Cliente> ClienteBean.getAllClientes() {
        return allClientes;
    }
    
    public void ClienteBean.setAllClientes(List<Cliente> allClientes) {
        this.allClientes = allClientes;
    }
    
    public String ClienteBean.findAllClientes() {
        allClientes = Cliente.findAllClientes();
        dataVisible = !allClientes.isEmpty();
        return null;
    }
    
    public boolean ClienteBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ClienteBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ClienteBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ClienteBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ClienteBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ClienteBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ClienteBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ClienteBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ClienteBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nombreCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nombreCreateOutput.setFor("nombreCreateInput");
        nombreCreateOutput.setId("nombreCreateOutput");
        nombreCreateOutput.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreCreateOutput);
        
        InputText nombreCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreCreateInput.setId("nombreCreateInput");
        nombreCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.nombre}", String.class));
        LengthValidator nombreCreateInputValidator = new LengthValidator();
        nombreCreateInputValidator.setMinimum(2);
        nombreCreateInput.addValidator(nombreCreateInputValidator);
        nombreCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreCreateInput);
        
        Message nombreCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreCreateInputMessage.setId("nombreCreateInputMessage");
        nombreCreateInputMessage.setFor("nombreCreateInput");
        nombreCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreCreateInputMessage);
        
        OutputLabel apellidoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        apellidoCreateOutput.setFor("apellidoCreateInput");
        apellidoCreateOutput.setId("apellidoCreateOutput");
        apellidoCreateOutput.setValue("Apellido:");
        htmlPanelGrid.getChildren().add(apellidoCreateOutput);
        
        InputText apellidoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        apellidoCreateInput.setId("apellidoCreateInput");
        apellidoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.apellido}", String.class));
        LengthValidator apellidoCreateInputValidator = new LengthValidator();
        apellidoCreateInputValidator.setMinimum(2);
        apellidoCreateInput.addValidator(apellidoCreateInputValidator);
        apellidoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(apellidoCreateInput);
        
        Message apellidoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        apellidoCreateInputMessage.setId("apellidoCreateInputMessage");
        apellidoCreateInputMessage.setFor("apellidoCreateInput");
        apellidoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(apellidoCreateInputMessage);
        
        OutputLabel segundoNombreCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        segundoNombreCreateOutput.setFor("segundoNombreCreateInput");
        segundoNombreCreateOutput.setId("segundoNombreCreateOutput");
        segundoNombreCreateOutput.setValue("Segundo Nombre:");
        htmlPanelGrid.getChildren().add(segundoNombreCreateOutput);
        
        InputText segundoNombreCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        segundoNombreCreateInput.setId("segundoNombreCreateInput");
        segundoNombreCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.segundoNombre}", String.class));
        LengthValidator segundoNombreCreateInputValidator = new LengthValidator();
        segundoNombreCreateInputValidator.setMinimum(2);
        segundoNombreCreateInput.addValidator(segundoNombreCreateInputValidator);
        segundoNombreCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(segundoNombreCreateInput);
        
        Message segundoNombreCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        segundoNombreCreateInputMessage.setId("segundoNombreCreateInputMessage");
        segundoNombreCreateInputMessage.setFor("segundoNombreCreateInput");
        segundoNombreCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(segundoNombreCreateInputMessage);
        
        OutputLabel segundoApellidoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        segundoApellidoCreateOutput.setFor("segundoApellidoCreateInput");
        segundoApellidoCreateOutput.setId("segundoApellidoCreateOutput");
        segundoApellidoCreateOutput.setValue("Segundo Apellido:");
        htmlPanelGrid.getChildren().add(segundoApellidoCreateOutput);
        
        InputText segundoApellidoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        segundoApellidoCreateInput.setId("segundoApellidoCreateInput");
        segundoApellidoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.segundoApellido}", String.class));
        LengthValidator segundoApellidoCreateInputValidator = new LengthValidator();
        segundoApellidoCreateInputValidator.setMinimum(2);
        segundoApellidoCreateInput.addValidator(segundoApellidoCreateInputValidator);
        segundoApellidoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(segundoApellidoCreateInput);
        
        Message segundoApellidoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        segundoApellidoCreateInputMessage.setId("segundoApellidoCreateInputMessage");
        segundoApellidoCreateInputMessage.setFor("segundoApellidoCreateInput");
        segundoApellidoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(segundoApellidoCreateInputMessage);
        
        OutputLabel identificacionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        identificacionCreateOutput.setFor("identificacionCreateInput");
        identificacionCreateOutput.setId("identificacionCreateOutput");
        identificacionCreateOutput.setValue("Identificacion:");
        htmlPanelGrid.getChildren().add(identificacionCreateOutput);
        
        InputText identificacionCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        identificacionCreateInput.setId("identificacionCreateInput");
        identificacionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.identificacion}", String.class));
        LengthValidator identificacionCreateInputValidator = new LengthValidator();
        identificacionCreateInputValidator.setMinimum(2);
        identificacionCreateInput.addValidator(identificacionCreateInputValidator);
        identificacionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(identificacionCreateInput);
        
        Message identificacionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identificacionCreateInputMessage.setId("identificacionCreateInputMessage");
        identificacionCreateInputMessage.setFor("identificacionCreateInput");
        identificacionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identificacionCreateInputMessage);
        
        OutputLabel telefonoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        telefonoCreateOutput.setFor("telefonoCreateInput");
        telefonoCreateOutput.setId("telefonoCreateOutput");
        telefonoCreateOutput.setValue("Telefono:");
        htmlPanelGrid.getChildren().add(telefonoCreateOutput);
        
        InputText telefonoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        telefonoCreateInput.setId("telefonoCreateInput");
        telefonoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.telefono}", String.class));
        LengthValidator telefonoCreateInputValidator = new LengthValidator();
        telefonoCreateInputValidator.setMinimum(2);
        telefonoCreateInput.addValidator(telefonoCreateInputValidator);
        telefonoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(telefonoCreateInput);
        
        Message telefonoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        telefonoCreateInputMessage.setId("telefonoCreateInputMessage");
        telefonoCreateInputMessage.setFor("telefonoCreateInput");
        telefonoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(telefonoCreateInputMessage);
        
        OutputLabel fechaNaciminetoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaNaciminetoCreateOutput.setFor("fechaNaciminetoCreateInput");
        fechaNaciminetoCreateOutput.setId("fechaNaciminetoCreateOutput");
        fechaNaciminetoCreateOutput.setValue("Fecha Nacimineto:");
        htmlPanelGrid.getChildren().add(fechaNaciminetoCreateOutput);
        
        Calendar fechaNaciminetoCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaNaciminetoCreateInput.setId("fechaNaciminetoCreateInput");
        fechaNaciminetoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.fechaNacimineto}", Date.class));
        fechaNaciminetoCreateInput.setNavigator(true);
        fechaNaciminetoCreateInput.setEffect("slideDown");
        fechaNaciminetoCreateInput.setPattern("dd/MM/yyyy");
        fechaNaciminetoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fechaNaciminetoCreateInput);
        
        Message fechaNaciminetoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaNaciminetoCreateInputMessage.setId("fechaNaciminetoCreateInputMessage");
        fechaNaciminetoCreateInputMessage.setFor("fechaNaciminetoCreateInput");
        fechaNaciminetoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaNaciminetoCreateInputMessage);
        
        OutputLabel visitaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        visitaCreateOutput.setFor("visitaCreateInput");
        visitaCreateOutput.setId("visitaCreateOutput");
        visitaCreateOutput.setValue("Visita:");
        htmlPanelGrid.getChildren().add(visitaCreateOutput);
        
        AutoComplete visitaCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        visitaCreateInput.setId("visitaCreateInput");
        visitaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.visita}", Visitas.class));
        visitaCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{clienteBean.completeVisita}", List.class, new Class[] { String.class }));
        visitaCreateInput.setDropdown(true);
        visitaCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "visita", String.class));
        visitaCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{visita.fechaVisita} #{visita.typo} #{visita.numeroVisita} #{visita.descripcion}", String.class));
        visitaCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{visita}", Visitas.class));
        visitaCreateInput.setConverter(new VisitasConverter());
        visitaCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(visitaCreateInput);
        
        Message visitaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        visitaCreateInputMessage.setId("visitaCreateInputMessage");
        visitaCreateInputMessage.setFor("visitaCreateInput");
        visitaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(visitaCreateInputMessage);
        
        OutputLabel paisCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        paisCreateOutput.setFor("paisCreateInput");
        paisCreateOutput.setId("paisCreateOutput");
        paisCreateOutput.setValue("Pais:");
        htmlPanelGrid.getChildren().add(paisCreateOutput);
        
        AutoComplete paisCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        paisCreateInput.setId("paisCreateInput");
        paisCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.pais}", Pais.class));
        paisCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{clienteBean.completePais}", List.class, new Class[] { String.class }));
        paisCreateInput.setDropdown(true);
        paisCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pais", String.class));
        paisCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pais.codigo} #{pais.name}", String.class));
        paisCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pais}", Pais.class));
        paisCreateInput.setConverter(new PaisConverter());
        paisCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(paisCreateInput);
        
        Message paisCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        paisCreateInputMessage.setId("paisCreateInputMessage");
        paisCreateInputMessage.setFor("paisCreateInput");
        paisCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(paisCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ClienteBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nombreEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nombreEditOutput.setFor("nombreEditInput");
        nombreEditOutput.setId("nombreEditOutput");
        nombreEditOutput.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreEditOutput);
        
        InputText nombreEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreEditInput.setId("nombreEditInput");
        nombreEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.nombre}", String.class));
        LengthValidator nombreEditInputValidator = new LengthValidator();
        nombreEditInputValidator.setMinimum(2);
        nombreEditInput.addValidator(nombreEditInputValidator);
        nombreEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreEditInput);
        
        Message nombreEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreEditInputMessage.setId("nombreEditInputMessage");
        nombreEditInputMessage.setFor("nombreEditInput");
        nombreEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreEditInputMessage);
        
        OutputLabel apellidoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        apellidoEditOutput.setFor("apellidoEditInput");
        apellidoEditOutput.setId("apellidoEditOutput");
        apellidoEditOutput.setValue("Apellido:");
        htmlPanelGrid.getChildren().add(apellidoEditOutput);
        
        InputText apellidoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        apellidoEditInput.setId("apellidoEditInput");
        apellidoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.apellido}", String.class));
        LengthValidator apellidoEditInputValidator = new LengthValidator();
        apellidoEditInputValidator.setMinimum(2);
        apellidoEditInput.addValidator(apellidoEditInputValidator);
        apellidoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(apellidoEditInput);
        
        Message apellidoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        apellidoEditInputMessage.setId("apellidoEditInputMessage");
        apellidoEditInputMessage.setFor("apellidoEditInput");
        apellidoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(apellidoEditInputMessage);
        
        OutputLabel segundoNombreEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        segundoNombreEditOutput.setFor("segundoNombreEditInput");
        segundoNombreEditOutput.setId("segundoNombreEditOutput");
        segundoNombreEditOutput.setValue("Segundo Nombre:");
        htmlPanelGrid.getChildren().add(segundoNombreEditOutput);
        
        InputText segundoNombreEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        segundoNombreEditInput.setId("segundoNombreEditInput");
        segundoNombreEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.segundoNombre}", String.class));
        LengthValidator segundoNombreEditInputValidator = new LengthValidator();
        segundoNombreEditInputValidator.setMinimum(2);
        segundoNombreEditInput.addValidator(segundoNombreEditInputValidator);
        segundoNombreEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(segundoNombreEditInput);
        
        Message segundoNombreEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        segundoNombreEditInputMessage.setId("segundoNombreEditInputMessage");
        segundoNombreEditInputMessage.setFor("segundoNombreEditInput");
        segundoNombreEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(segundoNombreEditInputMessage);
        
        OutputLabel segundoApellidoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        segundoApellidoEditOutput.setFor("segundoApellidoEditInput");
        segundoApellidoEditOutput.setId("segundoApellidoEditOutput");
        segundoApellidoEditOutput.setValue("Segundo Apellido:");
        htmlPanelGrid.getChildren().add(segundoApellidoEditOutput);
        
        InputText segundoApellidoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        segundoApellidoEditInput.setId("segundoApellidoEditInput");
        segundoApellidoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.segundoApellido}", String.class));
        LengthValidator segundoApellidoEditInputValidator = new LengthValidator();
        segundoApellidoEditInputValidator.setMinimum(2);
        segundoApellidoEditInput.addValidator(segundoApellidoEditInputValidator);
        segundoApellidoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(segundoApellidoEditInput);
        
        Message segundoApellidoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        segundoApellidoEditInputMessage.setId("segundoApellidoEditInputMessage");
        segundoApellidoEditInputMessage.setFor("segundoApellidoEditInput");
        segundoApellidoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(segundoApellidoEditInputMessage);
        
        OutputLabel identificacionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        identificacionEditOutput.setFor("identificacionEditInput");
        identificacionEditOutput.setId("identificacionEditOutput");
        identificacionEditOutput.setValue("Identificacion:");
        htmlPanelGrid.getChildren().add(identificacionEditOutput);
        
        InputText identificacionEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        identificacionEditInput.setId("identificacionEditInput");
        identificacionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.identificacion}", String.class));
        LengthValidator identificacionEditInputValidator = new LengthValidator();
        identificacionEditInputValidator.setMinimum(2);
        identificacionEditInput.addValidator(identificacionEditInputValidator);
        identificacionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(identificacionEditInput);
        
        Message identificacionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identificacionEditInputMessage.setId("identificacionEditInputMessage");
        identificacionEditInputMessage.setFor("identificacionEditInput");
        identificacionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identificacionEditInputMessage);
        
        OutputLabel telefonoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        telefonoEditOutput.setFor("telefonoEditInput");
        telefonoEditOutput.setId("telefonoEditOutput");
        telefonoEditOutput.setValue("Telefono:");
        htmlPanelGrid.getChildren().add(telefonoEditOutput);
        
        InputText telefonoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        telefonoEditInput.setId("telefonoEditInput");
        telefonoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.telefono}", String.class));
        LengthValidator telefonoEditInputValidator = new LengthValidator();
        telefonoEditInputValidator.setMinimum(2);
        telefonoEditInput.addValidator(telefonoEditInputValidator);
        telefonoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(telefonoEditInput);
        
        Message telefonoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        telefonoEditInputMessage.setId("telefonoEditInputMessage");
        telefonoEditInputMessage.setFor("telefonoEditInput");
        telefonoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(telefonoEditInputMessage);
        
        OutputLabel fechaNaciminetoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaNaciminetoEditOutput.setFor("fechaNaciminetoEditInput");
        fechaNaciminetoEditOutput.setId("fechaNaciminetoEditOutput");
        fechaNaciminetoEditOutput.setValue("Fecha Nacimineto:");
        htmlPanelGrid.getChildren().add(fechaNaciminetoEditOutput);
        
        Calendar fechaNaciminetoEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaNaciminetoEditInput.setId("fechaNaciminetoEditInput");
        fechaNaciminetoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.fechaNacimineto}", Date.class));
        fechaNaciminetoEditInput.setNavigator(true);
        fechaNaciminetoEditInput.setEffect("slideDown");
        fechaNaciminetoEditInput.setPattern("dd/MM/yyyy");
        fechaNaciminetoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fechaNaciminetoEditInput);
        
        Message fechaNaciminetoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaNaciminetoEditInputMessage.setId("fechaNaciminetoEditInputMessage");
        fechaNaciminetoEditInputMessage.setFor("fechaNaciminetoEditInput");
        fechaNaciminetoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaNaciminetoEditInputMessage);
        
        OutputLabel visitaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        visitaEditOutput.setFor("visitaEditInput");
        visitaEditOutput.setId("visitaEditOutput");
        visitaEditOutput.setValue("Visita:");
        htmlPanelGrid.getChildren().add(visitaEditOutput);
        
        AutoComplete visitaEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        visitaEditInput.setId("visitaEditInput");
        visitaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.visita}", Visitas.class));
        visitaEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{clienteBean.completeVisita}", List.class, new Class[] { String.class }));
        visitaEditInput.setDropdown(true);
        visitaEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "visita", String.class));
        visitaEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{visita.fechaVisita} #{visita.typo} #{visita.numeroVisita} #{visita.descripcion}", String.class));
        visitaEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{visita}", Visitas.class));
        visitaEditInput.setConverter(new VisitasConverter());
        visitaEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(visitaEditInput);
        
        Message visitaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        visitaEditInputMessage.setId("visitaEditInputMessage");
        visitaEditInputMessage.setFor("visitaEditInput");
        visitaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(visitaEditInputMessage);
        
        OutputLabel paisEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        paisEditOutput.setFor("paisEditInput");
        paisEditOutput.setId("paisEditOutput");
        paisEditOutput.setValue("Pais:");
        htmlPanelGrid.getChildren().add(paisEditOutput);
        
        AutoComplete paisEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        paisEditInput.setId("paisEditInput");
        paisEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.pais}", Pais.class));
        paisEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{clienteBean.completePais}", List.class, new Class[] { String.class }));
        paisEditInput.setDropdown(true);
        paisEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pais", String.class));
        paisEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pais.codigo} #{pais.name}", String.class));
        paisEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pais}", Pais.class));
        paisEditInput.setConverter(new PaisConverter());
        paisEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(paisEditInput);
        
        Message paisEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        paisEditInputMessage.setId("paisEditInputMessage");
        paisEditInputMessage.setFor("paisEditInput");
        paisEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(paisEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ClienteBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nombreLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreLabel.setId("nombreLabel");
        nombreLabel.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreLabel);
        
        HtmlOutputText nombreValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreValue.setId("nombreValue");
        nombreValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.nombre}", String.class));
        htmlPanelGrid.getChildren().add(nombreValue);
        
        HtmlOutputText apellidoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        apellidoLabel.setId("apellidoLabel");
        apellidoLabel.setValue("Apellido:");
        htmlPanelGrid.getChildren().add(apellidoLabel);
        
        HtmlOutputText apellidoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        apellidoValue.setId("apellidoValue");
        apellidoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.apellido}", String.class));
        htmlPanelGrid.getChildren().add(apellidoValue);
        
        HtmlOutputText segundoNombreLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        segundoNombreLabel.setId("segundoNombreLabel");
        segundoNombreLabel.setValue("Segundo Nombre:");
        htmlPanelGrid.getChildren().add(segundoNombreLabel);
        
        HtmlOutputText segundoNombreValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        segundoNombreValue.setId("segundoNombreValue");
        segundoNombreValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.segundoNombre}", String.class));
        htmlPanelGrid.getChildren().add(segundoNombreValue);
        
        HtmlOutputText segundoApellidoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        segundoApellidoLabel.setId("segundoApellidoLabel");
        segundoApellidoLabel.setValue("Segundo Apellido:");
        htmlPanelGrid.getChildren().add(segundoApellidoLabel);
        
        HtmlOutputText segundoApellidoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        segundoApellidoValue.setId("segundoApellidoValue");
        segundoApellidoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.segundoApellido}", String.class));
        htmlPanelGrid.getChildren().add(segundoApellidoValue);
        
        HtmlOutputText identificacionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identificacionLabel.setId("identificacionLabel");
        identificacionLabel.setValue("Identificacion:");
        htmlPanelGrid.getChildren().add(identificacionLabel);
        
        HtmlOutputText identificacionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identificacionValue.setId("identificacionValue");
        identificacionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.identificacion}", String.class));
        htmlPanelGrid.getChildren().add(identificacionValue);
        
        HtmlOutputText telefonoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        telefonoLabel.setId("telefonoLabel");
        telefonoLabel.setValue("Telefono:");
        htmlPanelGrid.getChildren().add(telefonoLabel);
        
        HtmlOutputText telefonoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        telefonoValue.setId("telefonoValue");
        telefonoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.telefono}", String.class));
        htmlPanelGrid.getChildren().add(telefonoValue);
        
        HtmlOutputText fechaNaciminetoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaNaciminetoLabel.setId("fechaNaciminetoLabel");
        fechaNaciminetoLabel.setValue("Fecha Nacimineto:");
        htmlPanelGrid.getChildren().add(fechaNaciminetoLabel);
        
        HtmlOutputText fechaNaciminetoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaNaciminetoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.fechaNacimineto}", Date.class));
        DateTimeConverter fechaNaciminetoValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        fechaNaciminetoValueConverter.setPattern("dd/MM/yyyy");
        fechaNaciminetoValue.setConverter(fechaNaciminetoValueConverter);
        htmlPanelGrid.getChildren().add(fechaNaciminetoValue);
        
        HtmlOutputText visitaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        visitaLabel.setId("visitaLabel");
        visitaLabel.setValue("Visita:");
        htmlPanelGrid.getChildren().add(visitaLabel);
        
        HtmlOutputText visitaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        visitaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.visita}", Visitas.class));
        visitaValue.setConverter(new VisitasConverter());
        htmlPanelGrid.getChildren().add(visitaValue);
        
        HtmlOutputText paisLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        paisLabel.setId("paisLabel");
        paisLabel.setValue("Pais:");
        htmlPanelGrid.getChildren().add(paisLabel);
        
        HtmlOutputText paisValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        paisValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.pais}", Pais.class));
        paisValue.setConverter(new PaisConverter());
        htmlPanelGrid.getChildren().add(paisValue);
        
        return htmlPanelGrid;
    }
    
    public Cliente ClienteBean.getCliente() {
        if (cliente == null) {
            cliente = new Cliente();
        }
        return cliente;
    }
    
    public void ClienteBean.setCliente(Cliente cliente) {
        this.cliente = cliente;
    }
    
    public List<Visitas> ClienteBean.completeVisita(String query) {
        List<Visitas> suggestions = new ArrayList<Visitas>();
        for (Visitas visitas : Visitas.findAllVisitases()) {
            String visitasStr = String.valueOf(visitas.getFechaVisita() +  " "  + visitas.getTypo() +  " "  + visitas.getNumeroVisita() +  " "  + visitas.getDescripcion());
            if (visitasStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(visitas);
            }
        }
        return suggestions;
    }
    
    public List<Pais> ClienteBean.completePais(String query) {
        List<Pais> suggestions = new ArrayList<Pais>();
        for (Pais pais : Pais.findAllPaises()) {
            String paisStr = String.valueOf(pais.getCodigo() +  " "  + pais.getName());
            if (paisStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(pais);
            }
        }
        return suggestions;
    }
    
    public String ClienteBean.onEdit() {
        return null;
    }
    
    public boolean ClienteBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ClienteBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ClienteBean.displayList() {
        createDialogVisible = false;
        findAllClientes();
        return "cliente";
    }
    
    public String ClienteBean.displayCreateDialog() {
        cliente = new Cliente();
        createDialogVisible = true;
        return "cliente";
    }
    
    public String ClienteBean.persist() {
        String message = "";
        if (cliente.getId() != null) {
            cliente.merge();
            message = "message_successfully_updated";
        } else {
            cliente.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Cliente");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllClientes();
    }
    
    public String ClienteBean.delete() {
        cliente.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Cliente");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllClientes();
    }
    
    public void ClienteBean.reset() {
        cliente = null;
        createDialogVisible = false;
    }
    
    public void ClienteBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
