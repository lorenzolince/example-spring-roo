// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.llh.web;

import com.llh.domain.Visitas;
import com.llh.web.VisitasBean;
import com.llh.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect VisitasBean_Roo_ManagedBean {
    
    declare @type: VisitasBean: @ManagedBean(name = "visitasBean");
    
    declare @type: VisitasBean: @SessionScoped;
    
    private String VisitasBean.name = "Visitases";
    
    private Visitas VisitasBean.visitas;
    
    private List<Visitas> VisitasBean.allVisitases;
    
    private boolean VisitasBean.dataVisible = false;
    
    private List<String> VisitasBean.columns;
    
    private HtmlPanelGrid VisitasBean.createPanelGrid;
    
    private HtmlPanelGrid VisitasBean.editPanelGrid;
    
    private HtmlPanelGrid VisitasBean.viewPanelGrid;
    
    private boolean VisitasBean.createDialogVisible = false;
    
    @PostConstruct
    public void VisitasBean.init() {
        columns = new ArrayList<String>();
        columns.add("fechaVisita");
        columns.add("typo");
        columns.add("numeroVisita");
        columns.add("descripcion");
    }
    
    public String VisitasBean.getName() {
        return name;
    }
    
    public List<String> VisitasBean.getColumns() {
        return columns;
    }
    
    public List<Visitas> VisitasBean.getAllVisitases() {
        return allVisitases;
    }
    
    public void VisitasBean.setAllVisitases(List<Visitas> allVisitases) {
        this.allVisitases = allVisitases;
    }
    
    public String VisitasBean.findAllVisitases() {
        allVisitases = Visitas.findAllVisitases();
        dataVisible = !allVisitases.isEmpty();
        return null;
    }
    
    public boolean VisitasBean.isDataVisible() {
        return dataVisible;
    }
    
    public void VisitasBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid VisitasBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void VisitasBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid VisitasBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void VisitasBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid VisitasBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void VisitasBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid VisitasBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel fechaVisitaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaVisitaCreateOutput.setFor("fechaVisitaCreateInput");
        fechaVisitaCreateOutput.setId("fechaVisitaCreateOutput");
        fechaVisitaCreateOutput.setValue("Fecha Visita:");
        htmlPanelGrid.getChildren().add(fechaVisitaCreateOutput);
        
        Calendar fechaVisitaCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaVisitaCreateInput.setId("fechaVisitaCreateInput");
        fechaVisitaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitasBean.visitas.fechaVisita}", Date.class));
        fechaVisitaCreateInput.setNavigator(true);
        fechaVisitaCreateInput.setEffect("slideDown");
        fechaVisitaCreateInput.setPattern("dd/MM/yyyy");
        fechaVisitaCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fechaVisitaCreateInput);
        
        Message fechaVisitaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaVisitaCreateInputMessage.setId("fechaVisitaCreateInputMessage");
        fechaVisitaCreateInputMessage.setFor("fechaVisitaCreateInput");
        fechaVisitaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaVisitaCreateInputMessage);
        
        OutputLabel typoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        typoCreateOutput.setFor("typoCreateInput");
        typoCreateOutput.setId("typoCreateOutput");
        typoCreateOutput.setValue("Typo:");
        htmlPanelGrid.getChildren().add(typoCreateOutput);
        
        InputText typoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        typoCreateInput.setId("typoCreateInput");
        typoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitasBean.visitas.typo}", String.class));
        LengthValidator typoCreateInputValidator = new LengthValidator();
        typoCreateInputValidator.setMinimum(2);
        typoCreateInput.addValidator(typoCreateInputValidator);
        typoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(typoCreateInput);
        
        Message typoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        typoCreateInputMessage.setId("typoCreateInputMessage");
        typoCreateInputMessage.setFor("typoCreateInput");
        typoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(typoCreateInputMessage);
        
        OutputLabel numeroVisitaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        numeroVisitaCreateOutput.setFor("numeroVisitaCreateInput");
        numeroVisitaCreateOutput.setId("numeroVisitaCreateOutput");
        numeroVisitaCreateOutput.setValue("Numero Visita:");
        htmlPanelGrid.getChildren().add(numeroVisitaCreateOutput);
        
        Spinner numeroVisitaCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        numeroVisitaCreateInput.setId("numeroVisitaCreateInput");
        numeroVisitaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitasBean.visitas.numeroVisita}", Integer.class));
        numeroVisitaCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(numeroVisitaCreateInput);
        
        Message numeroVisitaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numeroVisitaCreateInputMessage.setId("numeroVisitaCreateInputMessage");
        numeroVisitaCreateInputMessage.setFor("numeroVisitaCreateInput");
        numeroVisitaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numeroVisitaCreateInputMessage);
        
        OutputLabel descripcionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descripcionCreateOutput.setFor("descripcionCreateInput");
        descripcionCreateOutput.setId("descripcionCreateOutput");
        descripcionCreateOutput.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionCreateOutput);
        
        InputText descripcionCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descripcionCreateInput.setId("descripcionCreateInput");
        descripcionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitasBean.visitas.descripcion}", String.class));
        LengthValidator descripcionCreateInputValidator = new LengthValidator();
        descripcionCreateInputValidator.setMinimum(2);
        descripcionCreateInput.addValidator(descripcionCreateInputValidator);
        descripcionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcionCreateInput);
        
        Message descripcionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionCreateInputMessage.setId("descripcionCreateInputMessage");
        descripcionCreateInputMessage.setFor("descripcionCreateInput");
        descripcionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid VisitasBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel fechaVisitaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaVisitaEditOutput.setFor("fechaVisitaEditInput");
        fechaVisitaEditOutput.setId("fechaVisitaEditOutput");
        fechaVisitaEditOutput.setValue("Fecha Visita:");
        htmlPanelGrid.getChildren().add(fechaVisitaEditOutput);
        
        Calendar fechaVisitaEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaVisitaEditInput.setId("fechaVisitaEditInput");
        fechaVisitaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitasBean.visitas.fechaVisita}", Date.class));
        fechaVisitaEditInput.setNavigator(true);
        fechaVisitaEditInput.setEffect("slideDown");
        fechaVisitaEditInput.setPattern("dd/MM/yyyy");
        fechaVisitaEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fechaVisitaEditInput);
        
        Message fechaVisitaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaVisitaEditInputMessage.setId("fechaVisitaEditInputMessage");
        fechaVisitaEditInputMessage.setFor("fechaVisitaEditInput");
        fechaVisitaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaVisitaEditInputMessage);
        
        OutputLabel typoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        typoEditOutput.setFor("typoEditInput");
        typoEditOutput.setId("typoEditOutput");
        typoEditOutput.setValue("Typo:");
        htmlPanelGrid.getChildren().add(typoEditOutput);
        
        InputText typoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        typoEditInput.setId("typoEditInput");
        typoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitasBean.visitas.typo}", String.class));
        LengthValidator typoEditInputValidator = new LengthValidator();
        typoEditInputValidator.setMinimum(2);
        typoEditInput.addValidator(typoEditInputValidator);
        typoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(typoEditInput);
        
        Message typoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        typoEditInputMessage.setId("typoEditInputMessage");
        typoEditInputMessage.setFor("typoEditInput");
        typoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(typoEditInputMessage);
        
        OutputLabel numeroVisitaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        numeroVisitaEditOutput.setFor("numeroVisitaEditInput");
        numeroVisitaEditOutput.setId("numeroVisitaEditOutput");
        numeroVisitaEditOutput.setValue("Numero Visita:");
        htmlPanelGrid.getChildren().add(numeroVisitaEditOutput);
        
        Spinner numeroVisitaEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        numeroVisitaEditInput.setId("numeroVisitaEditInput");
        numeroVisitaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitasBean.visitas.numeroVisita}", Integer.class));
        numeroVisitaEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(numeroVisitaEditInput);
        
        Message numeroVisitaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numeroVisitaEditInputMessage.setId("numeroVisitaEditInputMessage");
        numeroVisitaEditInputMessage.setFor("numeroVisitaEditInput");
        numeroVisitaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numeroVisitaEditInputMessage);
        
        OutputLabel descripcionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descripcionEditOutput.setFor("descripcionEditInput");
        descripcionEditOutput.setId("descripcionEditOutput");
        descripcionEditOutput.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionEditOutput);
        
        InputText descripcionEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descripcionEditInput.setId("descripcionEditInput");
        descripcionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitasBean.visitas.descripcion}", String.class));
        LengthValidator descripcionEditInputValidator = new LengthValidator();
        descripcionEditInputValidator.setMinimum(2);
        descripcionEditInput.addValidator(descripcionEditInputValidator);
        descripcionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcionEditInput);
        
        Message descripcionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionEditInputMessage.setId("descripcionEditInputMessage");
        descripcionEditInputMessage.setFor("descripcionEditInput");
        descripcionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid VisitasBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText fechaVisitaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaVisitaLabel.setId("fechaVisitaLabel");
        fechaVisitaLabel.setValue("Fecha Visita:");
        htmlPanelGrid.getChildren().add(fechaVisitaLabel);
        
        HtmlOutputText fechaVisitaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaVisitaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitasBean.visitas.fechaVisita}", Date.class));
        DateTimeConverter fechaVisitaValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        fechaVisitaValueConverter.setPattern("dd/MM/yyyy");
        fechaVisitaValue.setConverter(fechaVisitaValueConverter);
        htmlPanelGrid.getChildren().add(fechaVisitaValue);
        
        HtmlOutputText typoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        typoLabel.setId("typoLabel");
        typoLabel.setValue("Typo:");
        htmlPanelGrid.getChildren().add(typoLabel);
        
        HtmlOutputText typoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        typoValue.setId("typoValue");
        typoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitasBean.visitas.typo}", String.class));
        htmlPanelGrid.getChildren().add(typoValue);
        
        HtmlOutputText numeroVisitaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numeroVisitaLabel.setId("numeroVisitaLabel");
        numeroVisitaLabel.setValue("Numero Visita:");
        htmlPanelGrid.getChildren().add(numeroVisitaLabel);
        
        HtmlOutputText numeroVisitaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numeroVisitaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitasBean.visitas.numeroVisita}", String.class));
        htmlPanelGrid.getChildren().add(numeroVisitaValue);
        
        HtmlOutputText descripcionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionLabel.setId("descripcionLabel");
        descripcionLabel.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionLabel);
        
        HtmlOutputText descripcionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionValue.setId("descripcionValue");
        descripcionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitasBean.visitas.descripcion}", String.class));
        htmlPanelGrid.getChildren().add(descripcionValue);
        
        return htmlPanelGrid;
    }
    
    public Visitas VisitasBean.getVisitas() {
        if (visitas == null) {
            visitas = new Visitas();
        }
        return visitas;
    }
    
    public void VisitasBean.setVisitas(Visitas visitas) {
        this.visitas = visitas;
    }
    
    public String VisitasBean.onEdit() {
        return null;
    }
    
    public boolean VisitasBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void VisitasBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String VisitasBean.displayList() {
        createDialogVisible = false;
        findAllVisitases();
        return "visitas";
    }
    
    public String VisitasBean.displayCreateDialog() {
        visitas = new Visitas();
        createDialogVisible = true;
        return "visitas";
    }
    
    public String VisitasBean.persist() {
        String message = "";
        if (visitas.getId() != null) {
            visitas.merge();
            message = "message_successfully_updated";
        } else {
            visitas.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Visitas");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllVisitases();
    }
    
    public String VisitasBean.delete() {
        visitas.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Visitas");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllVisitases();
    }
    
    public void VisitasBean.reset() {
        visitas = null;
        createDialogVisible = false;
    }
    
    public void VisitasBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
