// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.llh.domain;

import com.llh.domain.Visitas;
import com.llh.domain.VisitasDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect VisitasDataOnDemand_Roo_DataOnDemand {
    
    declare @type: VisitasDataOnDemand: @Component;
    
    private Random VisitasDataOnDemand.rnd = new SecureRandom();
    
    private List<Visitas> VisitasDataOnDemand.data;
    
    public Visitas VisitasDataOnDemand.getNewTransientVisitas(int index) {
        Visitas obj = new Visitas();
        setDescripcion(obj, index);
        setFechaVisita(obj, index);
        setNumeroVisita(obj, index);
        setTypo(obj, index);
        return obj;
    }
    
    public void VisitasDataOnDemand.setDescripcion(Visitas obj, int index) {
        String descripcion = "descripcion_" + index;
        obj.setDescripcion(descripcion);
    }
    
    public void VisitasDataOnDemand.setFechaVisita(Visitas obj, int index) {
        Date fechaVisita = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFechaVisita(fechaVisita);
    }
    
    public void VisitasDataOnDemand.setNumeroVisita(Visitas obj, int index) {
        Integer numeroVisita = new Integer(index);
        obj.setNumeroVisita(numeroVisita);
    }
    
    public void VisitasDataOnDemand.setTypo(Visitas obj, int index) {
        String typo = "typo_" + index;
        obj.setTypo(typo);
    }
    
    public Visitas VisitasDataOnDemand.getSpecificVisitas(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Visitas obj = data.get(index);
        Long id = obj.getId();
        return Visitas.findVisitas(id);
    }
    
    public Visitas VisitasDataOnDemand.getRandomVisitas() {
        init();
        Visitas obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Visitas.findVisitas(id);
    }
    
    public boolean VisitasDataOnDemand.modifyVisitas(Visitas obj) {
        return false;
    }
    
    public void VisitasDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Visitas.findVisitasEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Visitas' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Visitas>();
        for (int i = 0; i < 10; i++) {
            Visitas obj = getNewTransientVisitas(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
